# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."hello_world_container" = {
    image = "alpine:latest";
    volumes = [
      "/home/ritiek/script.sh:/script.sh:rw"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--entrypoint=[\"/script.sh\"]"
      "--network-alias=hello-world"
      "--network=hello_world_default"
    ];
  };
  systemd.services."docker-hello_world_container" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-hello_world_default.service"
    ];
    requires = [
      "docker-network-hello_world_default.service"
    ];
  };

  # Networks
  systemd.services."docker-network-hello_world_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f hello_world_default";
    };
    script = ''
      docker network inspect hello_world_default || docker network create hello_world_default
    '';
    partOf = [ "docker-compose-hello_world-root.target" ];
    wantedBy = [ "docker-compose-hello_world-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-hello_world-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
