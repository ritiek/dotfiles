# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, homelabMediaPath, ... }:

let
  # Configuration
  webUIPort = 5230;
  internalWebUIPort = 15230;

  # Import shared lazy-loading utilities
  lazyLoadingLib = import ./lib/lazy-loading.nix { inherit pkgs lib; };

  # Generate lazy-loading services
  lazyLoadingServices = lazyLoadingLib.mkLazyLoadingServices {
    serviceName = "Memos";
    dockerServiceName = "memos";
    webUIPort = webUIPort;
    internalPort = internalWebUIPort;
    refreshInterval = 3;
    requiredMounts = [
      "${homelabMediaPath}/services/memos"
    ];
  };

in lib.mkMerge [
  lazyLoadingServices
  {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."memos" = {
    image = "neosmemo/memos:latest";
    volumes = [
      "${homelabMediaPath}/services/memos:/var/opt/memos:rw"
    ];
    ports = [
      "127.0.0.1:${toString internalWebUIPort}:5230/tcp"  # Internal port only
    ];
    user = "1000:1000";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=memos"
      "--network=memos_default"
    ];
  };
  # Restore original docker-memos service dependencies
  systemd.services."docker-memos" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-memos_default.service"
    ];
    requires = [
      "docker-network-memos_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${homelabMediaPath}/services/memos"
    ];
    # Bind to root target
    partOf = [ "docker-compose-memos-root.target" ];
    wantedBy = [ "docker-compose-memos-root.target" ];
  };

  # Networks
  systemd.services."docker-network-memos_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f memos_default";
    };
    script = ''
      docker network inspect memos_default || docker network create memos_default
    '';
    partOf = [ "docker-compose-memos-root.target" ];
    wantedBy = [ "docker-compose-memos-root.target" ];
  };

  # Root service
  systemd.targets."docker-compose-memos-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };

  }
]
