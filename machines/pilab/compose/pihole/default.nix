# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, config, ... }:

{
  sops.secrets = {
    "compose/pihole.env" = {
      sopsFile = ./stack.env;
      format = "dotenv";
    };
    # "compose/pihole-api-key.txt" = {
    #   sopsFile = ./stack.env;
    #   format = "dotenv";
    #   key = "HOMEPAGE_DASHBOARD_API_KEY";
    # };
  };

  networking.firewall = {
    allowedTCPPorts = [
      53
      81
    ];
    allowedUDPPorts = [
      53
      67
      547
      123
    ];
  };

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environment = {
      "TZ" = "Asia/Kolkata";
      # If using Docker's default `bridge` network setting the dns listening mode should be set to 'all'
      # "FTLCONF_dns_listeningMode" = "all";
      "FTLCONF_webserver_port" = "81";
    };
    environmentFiles = [
      config.sops.secrets."compose/pihole.env".path
    ];
    volumes = [
      "/media/HOMELAB_MEDIA/services/pihole:/etc/pihole:rw"
      "pihole_dnsmasq.d:/etc/dnsmasq.d:rw"
    ];
    # ports = [
    #   # DNS Ports
    #   "53:53/tcp"
    #   "53:53/udp"
    #   # Default HTTP Port
    #   "81:8080/tcp"
    #   # Default HTTPs Port. FTL will generate a self-signed certificate
    #   "443:443/tcp"
    #   # Uncomment the below if using Pi-hole as your DHCP Server
    #   "67:67/udp"
    #   # Uncomment the line below if you are using Pi-hole as your NTP server
    #   "123:123/udp"
    # ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      # See https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
      "--network=host"
      # Required if you are using Pi-hole as your DHCP server, else not needed
      "--cap-add=NET_ADMIN"
      # Required if you are using Pi-hole as your NTP client to be able to set the host's system time
      "--cap-add=SYS_TIME"
      # Optional, if Pi-hole should get some more processing time
      "--cap-add=SYS_NICE"
    ];
    labels = {
      "homepage.description" = "DNS";
      "homepage.group" = "Services";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:81/admin";
      "homepage.icon" = "pi-hole";
      "homepage.name" = "Pi-Hole";
      # TODO: Make Homepage dashboard widgets work. Currently, one needs to hardcode
      #       the API key in the compose file, which is not ideal. For more info, see:
      #       https://discourse.nixos.org/t/how-to-assign-labels-to-oci-containers-securely/65907
      # "homepage.name" = "$HOMEPAGE_DASHBOARD_API_KEY";
      # "homepage.widget.type" = "pihole";
      # "homepage.widget.url" = "http://host.docker.internal:81/";
      # "homepage.widget.version" = "6";
      # "homepage.widget.key" = config.sops.secrets."compose/pihole-api-key.txt".path;
      # "homepage.widget.key" = "$HOMEPAGE_DASHBOARD_API_KEY";
    };
  };
  systemd.services."docker-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
      EnvironmentFile = config.sops.secrets."compose/pihole.env".path;
    };
    after = [
      "docker-volume-pihole_dnsmasq.d.service"
    ];
    requires = [
      "docker-volume-pihole_dnsmasq.d.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/pihole"
    ];
  };

  # Volumes
  systemd.services."docker-volume-pihole_dnsmasq.d" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker volume rm -f pihole_dnsmasq.d";
    };
    script = ''
      docker volume inspect pihole_dnsmasq.d || docker volume create pihole_dnsmasq.d
    '';
    partOf = [ "docker-compose-pihole-root.target" ];
    wantedBy = [ "docker-compose-pihole-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
