# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, config, ... }:

{
  sops.secrets."env.pihole" = {
    sopsFile = ./stack.env;
    format = "dotenv";
  };

  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."pihole" = {
    image = "pihole/pihole:latest";
    environmentFiles = [
      config.sops.secrets."env.pihole".path
    ];
    volumes = [
      "/media/services/pihole:/etc/pihole:rw"
      "pihole_dnsmasq.d:/etc/dnsmasq.d:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network=host"
    ];
  };
  systemd.services."podman-pihole" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-volume-pihole_dnsmasq.d.service"
    ];
    requires = [
      "podman-volume-pihole_dnsmasq.d.service"
    ];
    partOf = [
      "podman-compose-pihole-root.target"
    ];
    wantedBy = [
      "podman-compose-pihole-root.target"
    ];
  };

  # Volumes
  systemd.services."podman-volume-pihole_dnsmasq.d" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect pihole_dnsmasq.d || podman volume create pihole_dnsmasq.d
    '';
    partOf = [ "podman-compose-pihole-root.target" ];
    wantedBy = [ "podman-compose-pihole-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-pihole-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
