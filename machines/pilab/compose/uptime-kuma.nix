# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."uptime-kuma" = {
    image = "louislam/uptime-kuma:1";
    volumes = [
      "/media/services/uptime-kuma:/app/data:rw"
    ];
    ports = [
      "3001:3001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--dns=1.1.1.1"
      "--dns=100.100.100.100"
      "--dns=127.0.0.1"
      "--dns=8.8.8.8"
      "--network-alias=uptime-kuma"
      "--network=uptime-kuma_default"
    ];
  };
  systemd.services."podman-uptime-kuma" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-uptime-kuma_default.service"
    ];
    requires = [
      "podman-network-uptime-kuma_default.service"
    ];
    partOf = [
      "podman-compose-uptime-kuma-root.target"
    ];
    wantedBy = [
      "podman-compose-uptime-kuma-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-uptime-kuma_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f uptime-kuma_default";
    };
    script = ''
      podman network inspect uptime-kuma_default || podman network create uptime-kuma_default
    '';
    partOf = [ "podman-compose-uptime-kuma-root.target" ];
    wantedBy = [ "podman-compose-uptime-kuma-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-uptime-kuma-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
