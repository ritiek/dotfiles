# Auto-generated using compose2nix v0.3.2.
{ pkgs, lib, servicePaths, everythingElsePath, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."radarr" = {
    image = "lscr.io/linuxserver/radarr:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Asia/Kolkata";
    };
    volumes = [
      "${servicePaths.radarr.configSource}:/config:rw"
      "${everythingElsePath}/arr/movies:/movies:rw"
      "${everythingElsePath}/qbittorrent/downloads/complete:/downloads:rw"
    ];
    ports = [
      "7878:7878/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=radarr"
      "--network=radarr_default"
    ];
    labels = {
      "homepage.description" = "For movies";
      "homepage.group" = "*arr Stack";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:7878";
      "homepage.icon" = "radarr";
      "homepage.name" = "Radarr";
    };
  };
  systemd.services."docker-radarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-radarr_default.service"
    ];
    requires = [
      "docker-network-radarr_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      servicePaths.radarr.configSource
      "${everythingElsePath}/arr/movies"
      "${everythingElsePath}/qbittorrent/downloads/complete"
    ];
  };

  # Networks
  systemd.services."docker-network-radarr_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f radarr_default";
    };
    script = ''
      docker network inspect radarr_default || docker network create radarr_default
    '';
    partOf = [ "docker-compose-radarr-root.target" ];
    wantedBy = [ "docker-compose-radarr-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-radarr-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
