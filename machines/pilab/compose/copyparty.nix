# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

let
  # Configuration
  webUIPort = 3923;
  internalWebUIPort = 13923;

  # Import shared lazy-loading utilities
  lazyLoadingLib = import ./lib/lazy-loading.nix { inherit pkgs lib; };

  # Helper script to handle connections
  copypartyConnectionHandler = lazyLoadingLib.mkLazyLoadingHandler {
    serviceName = "Copyparty";
    dockerServiceName = "copyparty";
    internalPort = internalWebUIPort;
    refreshInterval = 3;
  };

in {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."copyparty" = {
    image = "copyparty/ac:latest";
    environment = {
      "LD_PRELOAD" = "/usr/lib/libmimalloc-secure.so.NOPE";
      "PYTHONUNBUFFERED" = "1";
    };
    volumes = [
      "/media/HOMELAB_MEDIA:/media/HOMELAB_MEDIA:rw,z"
      "/media/HOMELAB_MEDIA/services/copyparty:/cfg:rw,z"
    ];
    ports = [
      "127.0.0.1:${toString internalWebUIPort}:3923/tcp"  # Internal port only
    ];
    user = "1000:1000";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=copyparty"
      "--network=copyparty_default"
    ];
  };
  # Restore original docker-copyparty service dependencies
  systemd.services."docker-copyparty" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-copyparty_default.service"
    ];
    requires = [
      "docker-network-copyparty_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA"
      "/media/HOMELAB_MEDIA/services/copyparty"
    ];
    # Bind to root target
    partOf = [ "docker-compose-copyparty-root.target" ];
    wantedBy = [ "docker-compose-copyparty-root.target" ];
    # Start timer when service starts, stop when service stops
    postStart = ''
      ${pkgs.systemd}/bin/systemctl start copyparty-idle-stop.timer
    '';
    preStop = ''
      ${pkgs.systemd}/bin/systemctl stop copyparty-idle-stop.timer || true
    '';
  };

  # Networks
  systemd.services."docker-network-copyparty_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f copyparty_default";
    };
    script = ''
      docker network inspect copyparty_default || docker network create copyparty_default
    '';
    partOf = [ "docker-compose-copyparty-root.target" ];
    wantedBy = [ "docker-compose-copyparty-root.target" ];
  };

  # Root service
  systemd.targets."docker-compose-copyparty-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };

  # Port listener that starts Copyparty on any connection attempt
  systemd.services."copyparty-autostart" = {
    description = "Copyparty auto-start on connection";
    serviceConfig = {
      Restart = "always";
      RestartSec = "5s";
    };
    script = ''
      echo "Starting Copyparty auto-start proxy on port ${toString webUIPort}..."
      exec ${pkgs.socat}/bin/socat TCP4-LISTEN:${toString webUIPort},reuseaddr,fork EXEC:${copypartyConnectionHandler}
    '';
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA"
      "/media/HOMELAB_MEDIA/services/copyparty"
    ];
    # Bind to root target so it stops when target stops
    partOf = [ "docker-compose-copyparty-root.target" ];
    wantedBy = [ "docker-compose-copyparty-root.target" ];
    after = [ "docker.service" ];
  };

  # Timer-based service to stop when idle - started manually by docker-copyparty
  systemd.timers."copyparty-idle-stop" = {
    timerConfig = {
      OnCalendar = "*:0/5";  # Every 5 minutes, more explicit format
      Persistent = true;
      Unit = "copyparty-idle-stop.service";
    };
  };

  systemd.services."copyparty-idle-stop" = {
    serviceConfig = {
      Type = "oneshot";
    };
    script = ''
      # Check for active connections (both proxy port and internal port)
      proxy_connections=$(${pkgs.unixtools.netstat}/bin/netstat -an | grep ":${toString webUIPort}" | grep ESTABLISHED | wc -l)
      internal_connections=$(${pkgs.unixtools.netstat}/bin/netstat -an | grep ":${toString internalWebUIPort}" | grep ESTABLISHED | wc -l)
      total_connections=$((proxy_connections + internal_connections))

      if [ "$total_connections" -eq 0 ]; then
        echo "$(date): No active connections for 5+ minutes, stopping Copyparty"
        ${pkgs.systemd}/bin/systemctl stop docker-copyparty.service
        # Timer will automatically stop due to partOf dependency
      else
        echo "$(date): $total_connections active connections, keeping Copyparty running"
      fi
    '';
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA"
      "/media/HOMELAB_MEDIA/services/copyparty"
    ];
    # Also bind to root target for additional safety
    partOf = [ "docker-compose-copyparty-root.target" ];
  };
}
