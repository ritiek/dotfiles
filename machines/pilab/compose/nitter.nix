# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, homelabMediaPath, ... }:

let
  # Configuration
  webUIPort = 5095;
  internalWebUIPort = 15095;

  # Import lazy-loading module
  lazyLoadingLib = import ./lib/lazy-loading.nix { inherit pkgs lib; };
  
  # Generate lazy-loading services with custom commands for multi-service stack
  lazyLoadingServices = lazyLoadingLib.mkLazyLoadingServices {
    serviceName = "Nitter";
    dockerServiceName = "nitter";
    webUIPort = webUIPort;
    internalPort = internalWebUIPort;
    requiredMounts = [ "${homelabMediaPath}/services/nitter/nitter.conf" "${homelabMediaPath}/services/nitter/sessions.jsonl" ];
    rootTarget = "docker-compose-nitter-root.target";
    startCommand = "systemctl start docker-redis-nitter.service docker-nitter.service";
    stopCommand = "systemctl stop docker-compose-nitter-root.target";
    waitTimeout = 135; # 2+ minutes for nitter stack
  };

in lib.mkMerge [
  lazyLoadingServices
  {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."nitter" = {
    image = "zedeus/nitter:latest-arm64";
    volumes = [
      "${homelabMediaPath}/services/nitter/nitter.conf:/src/nitter.conf:rw"
      "${homelabMediaPath}/services/nitter/sessions.jsonl:/src/sessions.jsonl:rw"
    ];
    ports = [
      "127.0.0.1:${toString internalWebUIPort}:8080/tcp"  # Internal port only
    ];
    dependsOn = [
      "redis-nitter"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=nitter"
      "--network=nitter_default"
    ];
  };
  systemd.services."docker-nitter" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nitter_default.service"
    ];
    requires = [
      "docker-network-nitter_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${homelabMediaPath}/services/nitter/nitter.conf"
      "${homelabMediaPath}/services/nitter/sessions.jsonl"
    ];
    # Bind to root target
    partOf = [ "docker-compose-nitter-root.target" ];
    wantedBy = [ "docker-compose-nitter-root.target" ];
  };
  virtualisation.oci-containers.containers."redis-nitter" = {
    image = "redis:alpine";
    cmd = [ "redis-server" "--save" "60" "1" "--loglevel" "warning" ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=redis-nitter"
      "--network=nitter_default"
    ];
  };
  systemd.services."docker-redis-nitter" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-nitter_default.service"
    ];
    requires = [
      "docker-network-nitter_default.service"
    ];
    # Bind to root target
    partOf = [ "docker-compose-nitter-root.target" ];
    wantedBy = [ "docker-compose-nitter-root.target" ];
  };

  # Networks
  systemd.services."docker-network-nitter_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f nitter_default";
    };
    script = ''
      docker network inspect nitter_default || docker network create nitter_default
    '';
    partOf = [ "docker-compose-nitter-root.target" ];
    wantedBy = [ "docker-compose-nitter-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-nitter-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
} ]
