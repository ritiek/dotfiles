# Auto-generated using compose2nix v0.3.1.
{ config, pkgs, lib, ... }:

{
  sops.secrets."compose/frigate.env" = {
    sopsFile = ./stack.env;
    format = "dotenv";
  };

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."frigate" = {
    image = "ghcr.io/blakeblackshear/frigate:0.14.1-standard-arm64";
    environmentFiles = [
      config.sops.secrets."compose/frigate.env".path
    ];
    volumes = [
      "/tmp/frigate/cache:/tmp/cache:rw"
      "/etc/localtime:/etc/localtime:ro"
      "/media/HOMELAB_MEDIA/services/frigate/config.yml:/config/config.yml:rw"
      "/media/HOMELAB_MEDIA/services/frigate/storage:/media/frigate:rw"
    ];
    ports = [
      "5010:5000/tcp"
      "8971:8971/tcp"
      "8554:8554/tcp"
      "8555:8555/tcp"
      "8555:8555/udp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--dns=${lib.head (lib.splitString "/" config.virtualisation.docker.daemon.settings.bip)}"
      "--dns=100.100.100.100"
      "--dns=1.1.1.1"
      "--dns=8.8.8.8"
      "--device=/dev/video10:/dev/video10:rwm"
      "--network-alias=frigate"
      "--network=frigate_default"
      "--privileged"
      "--shm-size=67108864"
    ];
    labels = {
      "homepage.description" = "Monitor IP cams";
      "homepage.group" = "Monitoring";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:5010";
      "homepage.icon" = "frigate";
      "homepage.name" = "Frigate";
    };
  };
  systemd.services."docker-frigate" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-frigate_default.service"
    ];
    requires = [
      "docker-network-frigate_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      ""
      "/etc/localtime"
      "/media/HOMELAB_MEDIA/services/frigate/config.yml"
      "/media/HOMELAB_MEDIA/services/frigate/storage"
    ];
  };

  # Networks
  systemd.services."docker-network-frigate_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f frigate_default";
    };
    script = ''
      docker network inspect frigate_default || docker network create frigate_default
    '';
    partOf = [ "docker-compose-frigate-root.target" ];
    wantedBy = [ "docker-compose-frigate-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-frigate-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
