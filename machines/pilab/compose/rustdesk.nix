# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, homelabMediaPath, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."rustdesk-hbbr" = {
    image = "rustdesk/rustdesk-server:latest";
    volumes = [
      "${homelabMediaPath}/services/rustdesk/hbbr:/root:rw"
    ];
    ports = [
      "21117:21117/tcp"
      "21119:21119/tcp"
    ];
    cmd = [ "hbbr" ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=rustdesk-hbbr"
      "--network=rustdesk_rustdesk-net"
    ];
  };
  systemd.services."docker-rustdesk-hbbr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-rustdesk_rustdesk-net.service"
    ];
    requires = [
      "docker-network-rustdesk_rustdesk-net.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${homelabMediaPath}/services/rustdesk/hbbr"
    ];
  };
  virtualisation.oci-containers.containers."rustdesk-hbbs" = {
    image = "rustdesk/rustdesk-server:latest";
    volumes = [
      "${homelabMediaPath}/services/rustdesk/hbbs:/root:rw"
    ];
    ports = [
      "21115:21115/tcp"
      "21116:21116/tcp"
      "21116:21116/udp"
      "21118:21118/tcp"
    ];
    cmd = [ "hbbs" "-r" "pilab.lion-zebra.ts.net:21117" ];
    dependsOn = [
      "rustdesk-hbbr"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=rustdesk-hbbs"
      "--network=rustdesk_rustdesk-net"
    ];
    labels = {
      "homepage.description" = "Remote Desktop";
      "homepage.group" = "Services";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:21117";
      "homepage.icon" = "rustdesk";
      "homepage.name" = "RustDesk";
    };
  };
  systemd.services."docker-rustdesk-hbbs" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-rustdesk_rustdesk-net.service"
    ];
    requires = [
      "docker-network-rustdesk_rustdesk-net.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${homelabMediaPath}/services/rustdesk/hbbs"
    ];
  };

  # Networks
  systemd.services."docker-network-rustdesk_rustdesk-net" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f rustdesk_rustdesk-net";
    };
    script = ''
      docker network inspect rustdesk_rustdesk-net || docker network create rustdesk_rustdesk-net
    '';
    partOf = [ "docker-compose-rustdesk-root.target" ];
    wantedBy = [ "docker-compose-rustdesk-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-rustdesk-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
