# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."habitica-mongo" = {
    image = "docker.io/mongo:5.0";
    volumes = [
      "/media/HOMELAB_MEDIA/services/habitica/db:/data/db:rw"
      "/media/HOMELAB_MEDIA/services/habitica/dbconf:/data/configdb:rw"
    ];
    cmd = [ "--replSet" "rs" "--bind_ip_all" "--port" "27017" ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--health-cmd=echo \"try { rs.status() } catch (err) { rs.initiate() }\" | mongosh --port 27017 --quiet"
      "--health-interval=10s"
      "--health-retries=30"
      "--health-start-interval=1s"
      "--health-start-period=0s"
      "--health-timeout=30s"
      "--hostname=mongo"
      "--network-alias=mongo"
      "--network-alias=mongo"
      "--network=habitica_habitica"
    ];
    labels = {
      "homepage.description" = "Gamify Your Life";
      "homepage.group" = "Services";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:3000";
      "homepage.icon" = "habitica";
      "homepage.name" = "Habitica";
    };
  };
  systemd.services."docker-habitica-mongo" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-habitica_habitica.service"
    ];
    requires = [
      "docker-network-habitica_habitica.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/habitica/db"
      "/media/HOMELAB_MEDIA/services/habitica/dbconf"
    ];
  };
  virtualisation.oci-containers.containers."habitica-server" = {
    image = "docker.io/awinterstein/habitica-server:latest";
    environment = {
      "BASE_URL" = "http://127.0.0.1:8080";
      "INVITE_ONLY" = "false";
      "NODE_DB_URI" = "mongodb://mongo/habitica";
    };
    ports = [
      "3000:3000/tcp"
    ];
    dependsOn = [
      "habitica-mongo"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=server"
      "--network=habitica_habitica"
    ];
  };
  systemd.services."docker-habitica-server" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-habitica_habitica.service"
    ];
    requires = [
      "docker-network-habitica_habitica.service"
    ];
  };

  # Networks
  systemd.services."docker-network-habitica_habitica" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f habitica_habitica";
    };
    script = ''
      docker network inspect habitica_habitica || docker network create habitica_habitica --driver=bridge
    '';
    partOf = [ "docker-compose-habitica-root.target" ];
    wantedBy = [ "docker-compose-habitica-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-habitica-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
