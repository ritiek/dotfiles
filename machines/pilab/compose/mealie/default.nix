# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, config, ... }:

{
  sops.secrets."compose/mealie.env" = {
    sopsFile = ./stack.env;
    format = "dotenv";
  };

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."mealie" = {
    image = "hkotel/mealie";
    environmentFiles = [
      config.sops.secrets."compose/mealie.env".path
    ];
    volumes = [
      "/media/HOMELAB_MEDIA/services/mealie/data:/app/data:rw"
    ];
    ports = [
      "9091:9000/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=mealie"
      "--network=mealie_default"
    ];
    labels = {
      "homepage.description" = "Food Recipes";
      "homepage.group" = "Services";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:9091/";
      "homepage.icon" = "mealie";
      "homepage.name" = "Mealie";
    };
  };
  systemd.services."docker-mealie" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-mealie_default.service"
    ];
    requires = [
      "docker-network-mealie_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/mealie/data"
    ];
  };
  virtualisation.oci-containers.containers."mealie_dev_mailpit" = {
    image = "axllent/mailpit:latest";
    environmentFiles = [
      config.sops.secrets."compose/mealie.env".path
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=mailpit"
      "--network=mealie_default"
    ];
  };
  systemd.services."docker-mealie_dev_mailpit" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-mealie_default.service"
    ];
    requires = [
      "docker-network-mealie_default.service"
    ];
  };
  virtualisation.oci-containers.containers."mealie_dev_postgres" = {
    image = "postgres:15";
    environmentFiles = [
      config.sops.secrets."compose/mealie.env".path
    ];
    volumes = [
      "/media/HOMELAB_MEDIA/services/mealie/postgresql:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=postgres"
      "--network=mealie_default"
    ];
  };
  systemd.services."docker-mealie_dev_postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-mealie_default.service"
    ];
    requires = [
      "docker-network-mealie_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/mealie/postgresql"
    ];
  };

  # Networks
  systemd.services."docker-network-mealie_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f mealie_default";
    };
    script = ''
      docker network inspect mealie_default || docker network create mealie_default
    '';
    partOf = [ "docker-compose-mealie-root.target" ];
    wantedBy = [ "docker-compose-mealie-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-mealie-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
