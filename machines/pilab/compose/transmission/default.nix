# Auto-generated using compose2nix v0.3.2.
{ pkgs, lib, config, everythingElsePath, ... }:

{
  sops.secrets."compose/transmission.env" = {
    sopsFile = ./stack.env;
    format = "dotenv";
  };

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."transmission" = {
    image = "lscr.io/linuxserver/transmission:latest";
    environmentFiles = [
      config.sops.secrets."compose/transmission.env".path
    ];
    volumes = [
      "${everythingElsePath}/downloads/transmission/config:/config:rw"
      "${everythingElsePath}/downloads/transmission/downloads:/downloads:rw"
      "${everythingElsePath}/downloads/transmission/watch:/watch:rw"
    ];
    ports = [
      "9081:9091/tcp"
      "51413:51413/tcp"
      "51413:51413/udp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=transmission"
      "--network=transmission_default"
    ];
    labels = {
      "homepage.description" = "Torrent downloads";
      "homepage.group" = "*arr Stack";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:9081";
      "homepage.icon" = "transmission";
      "homepage.name" = "Transmission";
    };
  };
  systemd.services."docker-transmission" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-transmission_default.service"
    ];
    requires = [
      "docker-network-transmission_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${everythingElsePath}/downloads/transmission/config"
      "${everythingElsePath}/downloads/transmission/downloads"
      "${everythingElsePath}/downloads/transmission/watch"
    ];
  };

  # Networks
  systemd.services."docker-network-transmission_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f transmission_default";
    };
    script = ''
      docker network inspect transmission_default || docker network create transmission_default
    '';
    partOf = [ "docker-compose-transmission-root.target" ];
    wantedBy = [ "docker-compose-transmission-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-transmission-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
