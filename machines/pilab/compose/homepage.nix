# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

let
  homepageConnectionHandler = pkgs.writeShellScript "homepage-connection-handler" ''
    set -euo pipefail
    echo "Starting homepage service..." >&2
    systemctl start docker-homepage.service
    
    # Wait for service to be active
    timeout=30
    while [ $timeout -gt 0 ] && ! systemctl is-active --quiet docker-homepage.service; do
      sleep 1
      ((timeout--))
    done
    
    if systemctl is-active --quiet docker-homepage.service; then
      echo "Homepage service started successfully" >&2
      # Now proxy the connection
      exec ${pkgs.socat}/bin/socat STDIO TCP4:127.0.0.1:18080
    else
      echo "Failed to start homepage service within timeout" >&2
      exit 1
    fi
  '';
in

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."homepage" = {
    image = "ghcr.io/gethomepage/homepage:latest";
    environment = {
      # "PGID" = "1000";
      # "PUID" = "1000";
      "HOMEPAGE_ALLOWED_HOSTS" = "pilab.lion-zebra.ts.net";
    };
    volumes = [
      "/media/HOMELAB_MEDIA/services/homepage:/app/config:rw"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "127.0.0.1:18080:3000/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=homepage"
      "--network=homepage_default"
    ];
  };
  systemd.services."docker-homepage" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-homepage_default.service"
    ];
    requires = [
      "docker-network-homepage_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/homepage"
      "/var/run/docker.sock"
    ];
  };

  # Networks
  systemd.services."docker-network-homepage_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f homepage_default";
    };
    script = ''
      docker network inspect homepage_default || docker network create homepage_default
    '';
    partOf = [ "docker-compose-homepage-root.target" ];
    wantedBy = [ "docker-compose-homepage-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homepage-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
  
  # Auto-start proxy service
  systemd.services.homepage-autostart = {
    description = "Homepage Auto-start Service";
    after = [ "network.target" ];
    wantedBy = [ "multi-user.target" ];
    
    serviceConfig = {
      Type = "simple";
      Restart = "always";
      RestartSec = "5";
      ExecStart = "${pkgs.socat}/bin/socat TCP4-LISTEN:80,fork,reuseaddr EXEC:'${homepageConnectionHandler}'";
    };
  };
  
  # Idle stop timer
  systemd.timers.homepage-idle-stop = {
    description = "Homepage Idle Stop Timer";
    wantedBy = [ "timers.target" ];
    timerConfig = {
      OnCalendar = "*:0/5"; # Every 5 minutes
      Persistent = true;
    };
  };
  
  systemd.services.homepage-idle-stop = {
    description = "Stop homepage if idle";
    serviceConfig = {
      Type = "oneshot";
    };
    script = ''
      # Check for active connections on port 80
      if ! ${pkgs.iproute2}/bin/ss -an | grep -q ":80.*ESTABLISHED"; then
        echo "No active connections to homepage, stopping service..."
        systemctl stop docker-homepage.service || true
      else
        echo "Active connections detected, keeping homepage running"
      fi
    '';
  };
}
