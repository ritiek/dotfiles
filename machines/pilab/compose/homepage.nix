# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, homelabMediaPath, ... }:

let
  # Configuration
  webUIPort = 80;
  internalWebUIPort = 18080;
  
  # Import lazy-loading module
  lazyLoadingLib = import ./lib/lazy-loading.nix { inherit pkgs lib; };
  
  # Generate lazy-loading services
  lazyLoadingServices = lazyLoadingLib.mkLazyLoadingServices {
    serviceName = "Homepage";
    dockerServiceName = "homepage";
    webUIPort = webUIPort;
    internalPort = internalWebUIPort;
    requiredMounts = [ "${homelabMediaPath}/services/homepage" "/var/run/docker.sock" ];
  };
in lib.mkMerge [
  lazyLoadingServices
  {
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."homepage" = {
    image = "ghcr.io/gethomepage/homepage:latest";
    environment = {
      # "PGID" = "1000";
      # "PUID" = "1000";
      "HOMEPAGE_ALLOWED_HOSTS" = "pilab.lion-zebra.ts.net";
    };
    volumes = [
      "${homelabMediaPath}/services/homepage:/app/config:rw"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "127.0.0.1:${toString internalWebUIPort}:3000/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=homepage"
      "--network=homepage_default"
    ];
  };
  systemd.services."docker-homepage" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-homepage_default.service"
    ];
    requires = [
      "docker-network-homepage_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "${homelabMediaPath}/services/homepage"
      "/var/run/docker.sock"
    ];
  };

  # Networks
  systemd.services."docker-network-homepage_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f homepage_default";
    };
    script = ''
      docker network inspect homepage_default || docker network create homepage_default
    '';
    partOf = [ "docker-compose-homepage-root.target" ];
    wantedBy = [ "docker-compose-homepage-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homepage-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
} ]
