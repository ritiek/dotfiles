# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."homepage" = {
    image = "ghcr.io/gethomepage/homepage:latest";
    # environment = {
    #   "PGID" = "1000";
    #   "PUID" = "1000";
    # };
    volumes = [
      "/media/HOMELAB_MEDIA/services/homepage:/app/config:rw"
      "/var/run/docker.sock:/var/run/docker.sock:ro"
    ];
    ports = [
      "80:3000/tcp"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=homepage"
      "--network=homepage_default"
    ];
  };
  systemd.services."docker-homepage" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-homepage_default.service"
    ];
    requires = [
      "docker-network-homepage_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/homepage"
      "/var/run/docker.sock"
    ];
  };

  # Networks
  systemd.services."docker-network-homepage_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f homepage_default";
    };
    script = ''
      docker network inspect homepage_default || docker network create homepage_default
    '';
    partOf = [ "docker-compose-homepage-root.target" ];
    wantedBy = [ "docker-compose-homepage-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homepage-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
