# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."homebox" = {
    image = "ghcr.io/hay-kot/homebox:latest";
    environment = {
      "HBOX_LOG_FORMAT" = "text";
      "HBOX_LOG_LEVEL" = "info";
      "HBOX_WEB_MAX_UPLOAD_SIZE" = "10";
      "TZ" = "Asia/Kolkata";
    };
    volumes = [
      "/media/HOMELAB_MEDIA/services/homebox:/data:rw"
    ];
    ports = [
      "3100:7745/tcp"
    ];
    user = "1000:1000";
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=homebox"
      "--network=homebox_default"
    ];
  };
  systemd.services."docker-homebox" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-homebox_default.service"
    ];
    requires = [
      "docker-network-homebox_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/homebox"
    ];
  };

  # Networks
  systemd.services."docker-network-homebox_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f homebox_default";
    };
    script = ''
      docker network inspect homebox_default || docker network create homebox_default
    '';
    partOf = [ "docker-compose-homebox-root.target" ];
    wantedBy = [ "docker-compose-homebox-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-homebox-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
