# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, config, ... }:

{
  sops.secrets."compose/pwpush.env" = {
    sopsFile = ./stack.env;
    format = "dotenv";
  };

  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pwpush-db" = {
    image = "docker.io/postgres:15";
    environmentFiles = [
      config.sops.secrets."compose/pwpush.env".path
    ];
    volumes = [
      "/media/HOMELAB_MEDIA/services/pwpush/pgdata:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=db"
      "--network=pwpush_default"
    ];
  };
  systemd.services."docker-pwpush-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pwpush_default.service"
    ];
    requires = [
      "docker-network-pwpush_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/pwpush/pgdata"
    ];
  };
  virtualisation.oci-containers.containers."pwpush" = {
    # image = "docker.io/pglombardo/pwpush:latest";
    # Using stable for ARM 64 support for now:
    image = "docker.io/pglombardo/pwpush:stable";
    environmentFiles = [
      config.sops.secrets."compose/pwpush.env".path
    ];
    volumes = [
      "/media/HOMELAB_MEDIA/services/pwpush/settings.yml:/opt/PasswordPusher/config/settings.yml:rw"
    ];
    ports = [
      "5100:5100/tcp"
    ];
    dependsOn = [
      "pwpush-db"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=pwpush"
      "--network=pwpush_default"
    ];
    labels = {
      "homepage.description" = "";
      "homepage.group" = "Services";
      "homepage.href" = "http://pilab.lion-zebra.ts.net:5100";
      "homepage.icon" = "passwordpusher";
      "homepage.name" = "Password Pusher";
    };
  };
  systemd.services."docker-pwpush" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pwpush_default.service"
    ];
    requires = [
      "docker-network-pwpush_default.service"
    ];
    unitConfig.RequiresMountsFor = [
      "/media/HOMELAB_MEDIA/services/pwpush/settings.yml"
    ];
  };
  virtualisation.oci-containers.containers."pwpush-worker" = {
    image = "docker.io/pglombardo/pwpush-worker:stable";
    environmentFiles = [
      config.sops.secrets."compose/pwpush.env".path
    ];
    dependsOn = [
      "pwpush-db"
      "pwpush"
    ];
    log-driver = "journald";
    autoStart = false;
    extraOptions = [
      "--network-alias=worker"
      "--network=pwpush_default"
    ];
  };
  systemd.services."docker-pwpush-worker" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pwpush_default.service"
    ];
    requires = [
      "docker-network-pwpush_default.service"
    ];
  };

  # Networks
  systemd.services."docker-network-pwpush_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f pwpush_default";
    };
    script = ''
      docker network inspect pwpush_default || docker network create pwpush_default
    '';
    partOf = [ "docker-compose-pwpush-root.target" ];
    wantedBy = [ "docker-compose-pwpush-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-pwpush-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
  };
}
